** Definición **
Los mapas, también conocidos como arrays asociativos, son una colección de pares (clave, valor) en los que a través de la clave se accede a un valor. 
Los mapas pueden estar implementados con tablas hash, en las cuales se aplica una función a la clave para indicar la posición de la tabla, o bien árboles binarios de búsqueda, e los que los pares (clave, valor) estarán ordenados según su clave. 
Dependiendo de el uso que se le vaya a dar es más conveniente utilizar uno que otro.

** Operaciones **
Deben cumplir al menos con las operaciones de 
	
	añadir(clave, valor)
	eliminar(clave)
	consultar(clave)

** Mapas en el kernel **
En el kernel de linux se proporciona una estructura de datos de mapa simple y eficiente, cuyo cometido es mapear un número de identificación único (UID) a un puntero de datos (estructura de datos).
Se utilizan árboles binarios para realizar el mapeo.
También se proporciona una función de reserva de memoria (allocate) que se encarga de generar el UID para la clave y añadir el par (clave,valor) en el mapa.

Como ejemplo de mapas, en GNU/Linux, se utiliza la estructura idr. Se utiliza para mapear UIDs del espacio de usuario, por ejemplo IDs de temporizadores POSIX (ver definición de temporizadores POSIX), a sus estructuras de datos asociadas del kernel.

** Ejemplo **
El uso e idr es el siguiente:
	
	int id;
	struct idr idr_huh;
	struct my_struct *ptr = ...;
	
	idr_init(&idr_huh);	//Inicializa un idr
	
	do{
		if(!idr_pre_get(&idr_huh, GFP_KERNEL))	// Redimensiona el arbol binario si es necesario
			return -ENOSPC;
		ret = idr_get_new(&idr_huh, (void *)ptr, &id);	// Obtiene un nuevo UID y añade el par (UID,ptr) al idr. 0 si éxito
	}while(ret == -EAGAIN);
	
	ptr = (struct my_struct *)idr_find(&idr_huh, id);	//Consulta de la clave id
	if(!ptr)
		return -EINVAL;
	
	idr_remove(&idr_huh, id);	//Elimina el par (id,valor) del idr
	idr_destroy(&idr_huh);		// Destruye el idr. Libera sólo la memoria no utilizada por el idr, hay que remover antes los pares. -> idr_remove_all(&idr_huh);
